<?php
namespace NumbersPHP;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-25 at 10:53:09.
 */
class ComplexTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Complex
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new Complex;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers NumbersPHP\Complex::__toString
     * @todo   Implement test__toString().
     */
    public function test__toString()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NumbersPHP\Complex::add
     */
    public function testAdd()
    {
        $a = new \NumbersPHP\Complex(3, 4);
        $b = new \NumbersPHP\Complex(5, 6);
        $result = $a->add($b);
        $this->assertEquals(8, $result->getReal());
        $this->assertEquals(10, $result->getImaginary());
        $this->assertEquals(5, $result->magnitude());
        $this->assertTrue(
            $a->phase() - \NumbersPHP\Numbers::EPSILON < 0.9272952180016122 &&
            0.9272952180016122 < $a->phase() + \NumbersPHP\Numbers::EPSILON
        );
    }

    /**
     * @covers NumbersPHP\Complex::subtract
     * @todo   Implement testSubtract().
     */
    public function testSubtract()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NumbersPHP\Complex::multiply
     * @todo   Implement testMultiply().
     */
    public function testMultiply()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NumbersPHP\Complex::divide
     */
    public function testDivide()
    {
        $a = new \NumbersPHP\Complex(10, 0);
        $b = new \NumbersPHP\Complex(0, 10);
        $result = $a->divide($b);
        $this->assertEquals(0, $result->getReal());
        $this->assertEquals(-1, $result->getImaginary());
    }

    /**
     * @covers NumbersPHP\Complex::magnitude
     * @todo   Implement testMagnitude().
     */
    public function testMagnitude()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NumbersPHP\Complex::phase
     * @todo   Implement testPhase().
     */
    public function testPhase()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NumbersPHP\Complex::conjugate
     */
    public function testConjugate()
    {
        $a = new \NumbersPHP\Complex(3, 4);
        $b = $a->conjugate();
        $this->assertEquals(3, $b->getReal());
        $this->assertEquals(-4, $b->getImaginary());
    }

    /**
     * @covers NumbersPHP\Complex::pow
     */
    public function testPow()
    {
        $a = new \NumbersPHP\Complex(0, 1);
        $b = new \NumbersPHP\Complex(0, -1);
        $this->assertTrue(
            $a->complexPow($b)->equals(new \NumbersPHP\Complex(4.81047, 0), \NumbersPHP\Numbers::EPSILON)
        );

        $c = new \NumbersPHP\Complex(3, 4);
        $d = new \NumbersPHP\Complex(1, 2);
        $this->assertTrue(
            $c->complexPow($d)->equals(new \NumbersPHP\Complex(-0.4198, -0.66), \NumbersPHP\Numbers::EPSILON)
        );
    }

    /**
     * @covers NumbersPHP\Complex::complexPow
     * @todo   Implement testComplexPow().
     */
    public function testComplexPow()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NumbersPHP\Complex::roots
     * @todo   Implement testRoots().
     */
    public function testRoots()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NumbersPHP\Complex::sin
     * @todo   Implement testSin().
     */
    public function testSin()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NumbersPHP\Complex::cos
     */
    public function testCos()
    {
        $a = new \NumbersPHP\Complex(3, -4);
        $this->assertTrue(
            $a->cos()->equals(new \NumbersPHP\Complex(-27.0349, 3.8511), \NumbersPHP\Numbers::EPSILON)
        );
    }

    /**
     * @covers NumbersPHP\Complex::tan
     * @todo   Implement testTan().
     */
    public function testTan()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers NumbersPHP\Complex::equals
     * @todo   Implement testEquals().
     */
    public function testEquals()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}
